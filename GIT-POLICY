
========================================================================

This document is a work-in-progress, as I figure out what I'm doing
with git for real for the first time.  Therefore, it will probably
mostly serve as a record of dumb things I've recently done to the repo
myself and suddenly decided aren't a good idea going forward :)

========================================================================

The Git Book - Read It: http://book.git-scm.com/

Read these, in this order roughly:
http://nvie.com/posts/a-successful-git-branching-model/
http://osteele.com/archives/2008/05/commit-policies
http://sandofsky.com/blog/git-workflow.html
http://randyfay.com/node/91

I'm trying to follow some simlified hybrid of all the above advice.

========================================================================

Upstream public branches:
"master" branch is stable; Bugfixes only, keep it clean here!
"dev" branch is for feature commits, keep it clean here too!

========================================================================

Pull before push! Do all work in offline (well, not the official
public, anyways) branches, not just on local copies of master/dev
(unless the change is truly trivial).

Even better, use fetch/merge separately instead of raw "pull", it will
get you more oriented towards what's really happening and prevent
being confused by some corner cases.

Clean up and squash your commits and get them validated and working
before sending them upstream as whole feature units that are well-tested.

Commit to public branches via:
1) Squash/cleanup your whole feature branch to a single coherent commit
2) Rebase the feature branch from the (freshly pulled) local tracking
   copy of the public dev branch (you might want to do this a lot while
   working as well, before you squash everything)
3) Rebase your local public dev tracking copy onto the feature branch.
   This should result in a single feature commit to the tracking copy
   with no merge commit traffic.
4) Push that commit to public dev

Make liberal use of "git rebase -i" in your local branches to clean
them up and squash them up, etc.  It's a powerful tool.


========================================================================

If the feature's too big, try breaking it down into bite-sized
architectural bits that can go in serially over time: first the
infrastructure / refactoring your change needs, then other bits in
logical chunks, possibly using switches to disable code that isn't
useful/usable until later commits add to it or use it.  Get the design
right the first time if you can (ha, I never do).

========================================================================

Merging between master<->dev *should* use the default fastforwarding
behavior.  That should work ideally, assuming we stay away from having
tons of tiny checkpoint/mistake/temporary commits all over the dev
branch.  merging master -> dev will happen fairly regularly to import
bugfix traffic.  dev -> master only happens at the dawn of a new stable
release series.

========================================================================
