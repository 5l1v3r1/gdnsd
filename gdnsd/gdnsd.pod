
=head1 NAME

gdnsd - An authoritative DNS daemon

=head1 SYNOPSIS

  Usage: gdnsd [-d /data/root ] action
    -d data root dir (default PREFIX/gdnsd)
  Actions:
    checkconf - Checks validity of configuration and zonefiles
    startfg - Start gdnsd in foreground mode with logging to stderr
    start - Start gdnsd as a regular daemon
    stop - Stops a running daemon previously started by 'start'
    reload - Send SIGHUP to running daemon for zone data reload
    restart - Effectively equivalent to checkconf && stop && start, but faster
    force-reload - Aliases 'restart'
    condrestart - Does 'restart' action only if already running
    try-restart - Aliases 'condrestart'
    status - Checks the status of the running daemon

=head1 DESCRIPTION

B<gdnsd> is very fast, light, and pluggable authoritative DNS daemon.

The only commandline flag is C<-d>, which allows specifying an
alternate data root directory from the compiled-in default.

=head1 THE DATA ROOT DIRECTORY

This is an important, central concept in gdnsd's execution.  The data
root directory is considered unique to a given instance of gdnsd in
the case that multiple instances are running on the same machine.

Within a data root directory there should be a standardized directory
tree with fixed paths for various configuration inputs as well
as the daemon's runtime pidfile.

The layout within the data root is as follows:

  /etc/config    -> The primary config file, documented in gdnsd.config(8)
  /etc/zones/    -> Contains all zonefiles
  /var/gdnsd.pid -> Pidfile managed by gdnsd

Other paths within the data root are possible for future functionality or
plugin support.  For example, currently the geoip plugin loads GeoIP
databases from F</etc/geoip/> within the data root.

Note that the primary config file, F</etc/config>, it not technically
required.  If it's missing or empty, you'll get an all-defaults
configuration serving the zonefiles found in F</etc/zones>.

When gdnsd is invoked as root and becomes a daemon, it performs a
C<chroot()> into the data root directory just prior to dropping privileges.
The data root directory and everything beneath it should be owned by root
in this case for increased security.  In cases where gdnsd is initially
invoked as an unprivileged user and does not take care of security
functionality like C<chroot()> or dropping privileges itself, the data
root directory and everything beneath it should still be owned by
some user other than the one gdnsd executes as, with the exception
of the F</var> directory (as the daemon will need to write its pidfile
there).

Regardless, all configured input data is constrained to live within the
data root directory's tree at the specified locations.

=head1 ZONE FILES

All files in the subdirectory F</etc/zones/> of the data root are
considered zone files.  In general there should be exactly one file
per zone, and the filename should match the zone name.  Filenames
beginning with C<.> are ignored.  All other files must be regular
files (as opposed to directories, symlinks, sockets, etc).

In order to better support the special case of RFC 2137 -style
classless in-addr.arpa delegation zones (which contain forward
slashes), any C<@> symbol in the filename will be translated
to a forward slash (C</>) when transforming a filename into
its corresponding zone name.

For similar reasons, if your server is intended to serve the
root of the DNS, the filename for the root zone should be
the special filename F<ROOT_ZONE>, rather than the impossible
literal filename F<.>.

The standard DNS zone file escape sequences are recognized within
the filenames (e.g. C<\.> for a dot within a label, or C<\NNN>
where NNN is a decimal integer in the range 0 - 255), if for some
reason you need a strange character in your zone name.

Trailing dots on zonefile names are ignored; e.g. F<example.com>
and F<example.com.> are functionally equivalent.

No zone is allowed to be a subzone of another zone, and duplicate
zones are not allowed.

See L<gdnsd.zonefile(5)> for details on the internal syntax of the
zonefiles themselves.

=head1 ACTIONS

B<gdnsd> acts as its own initscript, internalizing
daemon management functions.  All valid invocations of the gdnsd
command include an B<action>, most of which model normal initscript
actions.

=over 4

=item B<checkconf>

Checks the validity of the configuration file and
zonefiles, setting the exit status appropriately (0 for success).

The C<start>, C<startfg>, and C<restart> actions implicitly do
the same checks as C<checkconf> as they load the configuration
for runtime use.

=item B<startfg>

Starts gdnsd in foreground mode, with all of the logging that would
normally go to syslog appearing instead on stderr.  Useful for
debugging and testing.

=item B<start>

Starts gdnsd as a regular background daemon.

=item B<stop>

Stops the gdnsd daemon previously started by start.

=item B<restart>

This is equivalent to the sequence C<checkconf && stop && start>,
but faster.  What actually happens behind the scenes is
a bit more complicated:

C<restart> is a special case of C<start> which first does
all of the C<checkconf> actions (bringing all the runtime data
into memory), then stops the existing daemon, and then finishes
starting itself (acquiring sockets, dropping privs, spawning
threads, etc).

The net result is that this minimizes the pause
in service availability during the restart (especially if you
have a large volume of zone data that takes significant time
to load), and also leaves the original daemon instance untouched
if the configuration is invalid (you've made an error in your
new zone data, etc).

=item B<reload>

Alias for C<restart>.  gdnsd does not have any other way
to reload configuration, and it's a fairly seamless restart in
any case.

=item B<force-reload>

Again, an aliase for C<restart>.

=item B<condrestart>

This is basically "restart only if already running".

Performs the same actions as C<restart>, but aborts early
(with a successful exit value) if the daemon was not already
running.

=item B<try-restart>

Alias for C<condrestart>.

=item B<status>

Checks the status of the running daemon, returning 0 if it
is running or non-zero if it isn't

=back

Any other commandline option will be treated as invalid,
which will result in displaying a short help text to F<STDERR>
and exiting with a non-zero exit status.  This includes
things like the ubiquitous B<--help> and B<--version>.

=head1 ENVIRONMENT VARIABLES

=over 4

=item B<TZ>

On most systems tested, gdnsd's current solution for getting
syslog timestamps correct while under C<chroot()> seems to
work fine, as it does C<tzset()> before C<chroot()>, and so
no special setting of the C<TZ> environment variable is required.

On some older/stranger systems, the syslog messages will revert
to UTC timestamps after C<chroot()>.  The workaround for these
systems is to either set the C<TZ> environment variable in gdnsd's
initscript to a value like C</etc/localtime>, which will make
glibc cache the timezone correctly, or to copy all of the relevant
timezone files into the chroot directory (F</etc/localtime> and
perhaps all of F</usr/share/zoneinfo>).  Or whatever your platform
may require.  Patches welcome.

=back

=head1 SIGNALS

Any signal not explicitly mentioned is not explicitly handled.  That
is to say, they will have their default actions, which often include
aborting execution.

=over 4

=item B<SIGTERM>, B<SIGINT>

Causes the daemon to exit gracefully with accompanying log output.

=item B<SIGHUP>

Causes the daemon to attempt to load any new changes to the zone data.

=item B<SIGPIPE>

Ignored when daemonized.

=back

=head1 EXIT STATUS

An exit status of zero indicates success, anything else
indicates failure.

=head1 SEE ALSO

L<gdnsd.config(5)>, L<gdnsd.zonefile(5)>

The gdnsd manual.

=head1 COPYRIGHT AND LICENSE

Copyright (c) 2012 Brandon L Black <blblack@gmail.com>

This file is part of gdnsd.

gdnsd is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

gdnsd is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with gdnsd.  If not, see <http://www.gnu.org/licenses/>.

=cut
